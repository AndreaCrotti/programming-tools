#!/usr/bin/env python

import re
import sys

from subprocess import Popen, PIPE

IGNORE = ",".join([
    "C0103",  # Naming convention
    "C0111",  # Missing docstring
    "I0011",  # Warning locally suppressed using disable-msg
    "I0012",  # Warning locally suppressed using disable-msg
    "R0201",  # Method could be a function
    "R0904",  # Too many public methods
    "W0142",  # *args or **kwargs magic.
    "W0511",  # FIXME/TODO
])

CMD = "pylint --output-format parseable --include-ids y --reports n --disable-msg={} {}".format(IGNORE, ' '.join(sys.argv[1:]))


def report_errors():
    p = Popen(CMD, shell=True, bufsize=-1,
              stdin=PIPE, stdout=PIPE, stderr=PIPE,
              close_fds=True)

    pylint_re = re.compile('^([^:]+):(\d+):\s*\[([WECR])([^,]+),\s*([^\]]+)\]\s*(.*)$')

    for line in p.stdout:
        line = line.strip()
        m = pylint_re.match(line)
        if m:
            filename, linenum, errtype, errnum, context, description = m.groups()

            if errtype == "E":
                msg = "Error"
            else:
                msg = "Warning"

            # Here we are targetting the following flymake regexp:
            #
            #  ("\\(.*\\) at \\([^ \n]+\\) line \\([0-9]+\\)[,.\n]" 2 3 nil 1)
            #
            # where the number at the end indicate the index into the regexp
            # groups of(file, line, column, error text)
            #
            # You can see what regexps flymake uses to parse its output by
            # running 'M-x describe-variable' on the variable
            # 'flymake-err-line-patterns'

        print("{} {}{} {} at {} line {}.".format(msg, errtype, errnum,
                                                 description, filename, linenum))

if __name__ == '__main__':
    report_errors()
